-- CREATE DATABASE pet;
-- drop table if exists PETRESCUE;

-- create table PETRESCUE (
-- 	ID INTEGER NOT NULL,
-- 	ANIMAL VARCHAR(20),
-- 	QUANTITY INTEGER,
-- 	COST DECIMAL(6,2),
-- 	RESCUEDATE DATE,
-- 	PRIMARY KEY (ID)
-- 	);

-- insert into PETRESCUE values 
-- 	(1,'Cat',9,450.09,'2018-05-29'),
-- 	(2,'Dog',3,666.66,'2018-06-01'),
-- 	(3,'Dog',1,100.00,'2018-06-04'),
-- 	(4,'Parrot',2,50.00,'2018-06-04'),
-- 	(5,'Dog',1,75.75,'2018-06-10'),
-- 	(6,'Hamster',6,60.60,'2018-06-11'),
-- 	(7,'Cat',1,44.44,'2018-06-11'),
-- 	(8,'Goldfish',24,48.48,'2018-06-14'),
-- 	(9,'Dog',2,222.22,'2018-06-15');
-- -- ## Aggregation Functions
-- SELECT * FROM petrescue;
-- SELECT SUM(COST) FROM PETRESCUE;
-- SELECT SUM(COST) AS SUM_OF_COST FROM PETRESCUE;
-- SELECT MAX(QUANTITY) FROM PETRESCUE;
-- SELECT MIN(QUANTITY) FROM PETRESCUE;
-- SELECT AVG(COST) as AVG_OG_COST FROM PETRESCUE;
-- -- sum of x/ n

-- -- Scalar Functions and String Functions
-- SELECT * FROM petrescue;
-- SELECT ROUND(COST, 0) FROM PETRESCUE;
-- SELECT ROUND(COST, 0) FROM PETRESCUE;
-- SELECT ROUND(COST, 1) FROM PETRESCUE;
-- SELECT `ANIMAL`, LENGTH(ANIMAL) FROM PETRESCUE;
-- SELECT UCASE(ANIMAL) FROM PETRESCUE;
-- SELECT LCASE(ANIMAL) FROM PETRESCUE;
-- -- ## Date Functions
-- SELECT `RESCUEDATE`, DAY(RESCUEDATE) FROM PETRESCUE;
-- SELECT MONTH(RESCUEDATE) FROM PETRESCUE;
-- SELECT `RESCUEDATE`, MONTHNAME(RESCUEDATE) FROM PETRESCUE;
-- SELECT YEAR(RESCUEDATE) FROM PETRESCUE;
-- SELECT `RESCUEDATE` , DATE_ADD(RESCUEDATE, INTERVAL 3 DAY) FROM PETRESCUE;
-- SELECT DATE_ADD(RESCUEDATE, INTERVAL 2 MONTH) FROM PETRESCUE;
-- SELECT DATE_SUB(RESCUEDATE, INTERVAL 3 DAY) FROM PETRESCUE;
-- SELECT `RESCUEDATE`, DATEDIFF(CURRENT_DATE, RESCUEDATE) FROM PETRESCUE;
-- SELECT FROM_DAYS(DATEDIFF(CURRENT_DATE, RESCUEDATE)) FROM PETRESCUE;


SELECT * FROM employees;
SELECT * 
FROM EMPLOYEES
WHERE salary < AVG(salary);

SELECT *
FROM EMPLOYEES
WHERE SALARY < (SELECT AVG(SALARY) FROM EMPLOYEES);

SELECT EMP_ID, SALARY, (SELECT MAX(SALARY) FROM EMPLOYEES) AS MAX_SALARY 
FROM EMPLOYEES;
SELECT * FROM employees;
SELECT F_NAME, L_NAME
FROM EMPLOYEES
WHERE `JOB_ID` = (SELECT MIN(`JOB_ID`) FROM EMPLOYEES);

SELECT AVG(SALARY) 
FROM (SELECT SALARY 
      FROM EMPLOYEES 
      ORDER BY SALARY DESC 
      LIMIT 5) AS SALARY_TABLE;
---------------------------------------------------------------------
-- Write a query to find the average salary of the five least-earning employees.
-- SELECT AVG(SALARY) 
-- FROM (SELECT SALARY 
--       FROM EMPLOYEES 
--       ORDER BY SALARY 
--       LIMIT 5) AS SALARY_TABLE;
-- SELECT * FROM employees;
-- Write a query to find the records of employees older than the average age of all employees.
-- SELECT * 
-- FROM EMPLOYEES 
-- WHERE YEAR(FROM_DAYS(DATEDIFF(CURRENT_DATE,B_DATE))) > 
--     (SELECT AVG(YEAR(FROM_DAYS(DATEDIFF(CURRENT_DATE,B_DATE)))) 
--     FROM EMPLOYEES);

-- From the Job_History table, display the list of Employee IDs, years of service, and average years of service for all entries.
-- SELECT EMPL_ID, YEAR(FROM_DAYS(DATEDIFF(CURRENT_DATE, START_DATE))), 
--     (SELECT AVG(YEAR(FROM_DAYS(DATEDIFF(CURRENT_DATE, START_DATE)))) 
--     FROM JOB_HISTORY)
-- FROM JOB_HISTORY;

--------------------------------------------------------------------------------
-- Multiple table
SELECT * FROM employees;
SELECT * FROM jobs;
SELECT * FROM EMPLOYEES WHERE JOB_ID IN (SELECT JOB_IDENT FROM JOBS);
SELECT JOB_TITLE, MIN_SALARY, MAX_SALARY, JOB_IDENT
FROM JOBS
WHERE JOB_IDENT IN (select JOB_ID from EMPLOYEES where SALARY > 70000 );

SELECT *
FROM EMPLOYEES, JOBS
WHERE EMPLOYEES.JOB_ID = JOBS.JOB_IDENT;
SELECT *
FROM EMPLOYEES E, JOBS J
WHERE E.JOB_ID = J.JOB_IDENT;
SELECT EMP_ID,F_NAME,L_NAME, JOB_TITLE
FROM EMPLOYEES E, JOBS J
WHERE E.JOB_ID = J.JOB_IDENT;
SELECT E.EMP_ID, E.F_NAME, E.L_NAME, J.JOB_TITLE
FROM EMPLOYEES E, JOBS J
WHERE E.JOB_ID = J.JOB_IDENT;
-------------------------------------------------------------------------
-- Retrieve only the list of employees whose JOB_TITLE is Jr. Designer.
-- a. Using sub-queries
-- SELECT *
-- FROM EMPLOYEES
-- WHERE JOB_ID IN (SELECT JOB_IDENT
--                  FROM JOBS
--                  WHERE JOB_TITLE= 'Jr. Designer');
-- b. Using Implicit Joins
-- SELECT *
-- FROM EMPLOYEES E, JOBS J
-- WHERE E.JOB_ID = J.JOB_IDENT AND J.JOB_TITLE= 'Jr. Designer';

-- Retrieve JOB information and a list of employees whose birth year is after 1976.
-- SELECT JOB_TITLE, MIN_SALARY, MAX_SALARY, JOB_IDENT
-- FROM JOBS
-- WHERE JOB_IDENT IN (SELECT JOB_ID
--                     FROM EMPLOYEES
--                     WHERE YEAR(B_DATE)>1976 );

-- SELECT J.JOB_TITLE, J.MIN_SALARY, J.MAX_SALARY, J.JOB_IDENT
-- FROM JOBS J, EMPLOYEES E
-- WHERE E.JOB_ID = J.JOB_IDENT AND YEAR(E.B_DATE)>1976;